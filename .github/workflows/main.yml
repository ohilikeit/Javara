name: GPT Code Review on Entire PR Diff

on:
  pull_request_target:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Environment Variables
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "Repository: ${{ github.repository }}"
          echo "Base ref: ${{ github.event.pull_request.base.ref }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"

      - name: Debug OPENAI_API_KEY
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY is not set or empty!"
            exit 1
          else
            echo "OPENAI_API_KEY is set and valid."
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Fetch PR Diff
        run: |
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
          git diff origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} \
          -- '*.ts' '*.tsx' '*.json' '*.yml' '*.sql' '*.prisma' > pr_diff.txt
          
          # 디버깅을 위한 diff 파일 크기 확인
          echo "Diff file size: $(wc -c < pr_diff.txt) bytes"
          echo "Diff file line count: $(wc -l < pr_diff.txt) lines"

      - name: Read Prompt file
        id: prompt
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.github/workflows/code-review-prompt.txt

      - name: Read PR Diff
        id: diff
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pr_diff.txt

      - name: Combine Prompt and Diff
        run: |
          cat <<'EOF' > combined_prompt.txt
          ${{ steps.prompt.outputs.content }}

          ----- PR DIFF START -----
          ${{ steps.diff.outputs.content }}
          ----- PR DIFF END -----
          EOF

      - name: Run GPT Code Review
        id: gpt_call
        run: |
          set -euo pipefail

          JSON_PAYLOAD=$(jq -Rs --arg system_msg "You are a senior developer ..." '{
            "model": "gpt-4o-mini",
            "messages": [
              {
                "role": "system",
                "content": $system_msg
              },
              {
                "role": "user",
                "content": .
              }
            ],
            "temperature": 0.7,
            "max_tokens": 16384
          }' combined_prompt.txt)

          echo "Sending request to OpenAI API..."
          
          RESPONSE=$(curl -fsS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD")

          echo "Response received from OpenAI API"
          
          # Response 내용 검증
          if ! echo "$RESPONSE" | jq -e '.choices[0].message.content' > /dev/null; then
            echo "Error: Invalid response format from OpenAI API"
            echo "Response: $RESPONSE"
            exit 1
          fi

          CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          {
            echo "content<<EOF"
            echo "$CONTENT"
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Post comment on PR
        run: |
          # PR 번호 직접 사용
          prNumber="${{ github.event.pull_request.number }}"
          
          echo "Debug: Event name = ${{ github.event_name }}"
          echo "Debug: PR number = $prNumber"
          echo "Debug: Repository = ${{ github.repository }}"
          
          if [ -z "$prNumber" ]; then
            echo "Error: PR number is empty"
            exit 1
          fi
          
          # GPT 응답 내용 확인
          CONTENT="${{ steps.gpt_call.outputs.content }}"
          if [ -z "$CONTENT" ]; then
            echo "Error: No content to post"
            exit 1
          fi
          
          # Comment 생성 (이스케이프 처리 개선)
          BODY=$(echo "$CONTENT" | jq -R -s '.')
          
          # API 요청 실행
          RESPONSE=$(curl -sS \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST \
            -d "{\"body\": $BODY}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${prNumber}/comments")
          
          # API 응답 확인 및 디버깅
          echo "Debug: API Response = $RESPONSE"
          
          if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
            echo "Successfully posted comment to PR"
          else
            echo "Error posting comment to PR"
            echo "Response: $RESPONSE"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
